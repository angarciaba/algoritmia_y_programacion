# Depurador/Demo de c贸digo para Ruby usando Qt
# Una ventana para el c贸digo a ejectutar paso a paso.
# Un bot贸n para ejecuci贸n "STEP"
# Una ventana para mostrar variables. Las variables pueden ser de 2 tipos:
# - Normales
# - indices hacia arrays (sale una flecha hacia el elemento del array)

tp__tp = TracePoint.new(:line, :call, :return) do |tp|
  p tp.lineno
  variables =  tp.binding.eval('local_variables') + tp.binding.eval('instance_variables')- [:tp]
  variables.each do |var| 
    value=tp.binding.eval("#{var}")
    p "#{var}=#{value}"
  end
end
tp__tp.enable


class Estring
  attr_accessor :s
  def initialize(x)
    @s=x
  end
end

string="Hola"
string << "A"
string << "B"
u=Estring.new("Chao")
p u.s

for i in 0..10
  p i
end


def add(a,b)
  a + b
end

p add(1,2)
tp__tp.disable


=begin
produces:
#<TracePoint:line@prog.rb:7>
#<TracePoint:line@prog.rb:11>
#<TracePoint:call `add'@prog.rb:7>
#<TracePoint:line@prog.rb:8 in `add'>
#<TracePoint:return `add'@prog.rb:9>
3
#<TracePoint:line@prog.rb:13>
The events you can capture are:
:b_call
:b_return
:c_call
:c_return
:call
:class
:end
:line
:raise
:return
:thread_begin
:thread_end
block entry
block exit
call a C-language routine
return from a C-language routine
call a Ruby method
start class/module definition
end a class/module definition
execute a ne source code line
raise an exception
return from a Ruby method
start a thread
end a thread
=end


